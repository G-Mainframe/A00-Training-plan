1．3
=======  ST077.COBOL.COMLINK ========
000100 //ST077A    JOB  1,JHY,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),  
000200 //          NOTIFY=&SYSUID                                 
000300 //STEP1  EXEC  IGYWCL                                      
000400 //COBOL.SYSIN      DD DSN=ST077.COBOL.SOURCE(COB1),DISP=SHR   
000500 //LKED.SYSLMOD  DD DSN=ST077.COBOL.LOAD(COB1),DISP=SHR     
=======  ST077.COBOL.RUN ========
000100 //ST077A    JOB  1,JHY,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),  
000200 //          NOTIFY=&SYSUID                                 
000300 //STEP1  EXEC  PGM=COB1                                    
000400 //STEPLIB    DD  DSN=ST077.COBOL.LOAD,DISP=SHR               
000500 //SYSPRINT DD  SYSOUT=*                                    
1．4
000100 IDENTIFICATION  DIVISION.
000200 PROGRAM-ID.  EXAM1.
000300 ENVIRONMENT  DIVISION.    
000400 DATA  DIVISION.
000500 PROCEDURE  DIVISION.
000600 S.    DISPLAY 'THIS IS A COBOL PROGRAM'
700 STOP RUN.
1．4．2
          IDENTIFICATION  DIVISION.
          PROGRAM-ID.   EXAM2.
          ENVIRONMENT  DIVISION.
          DATA  DIVISION.
          WORKING-STORAGE  SECTION.
          77  A  PICTURE  IS  9(3).
          77  B  PICTURE  IS  9(3).
          PROCEDURE  DIVISION.
          S.    ACCEPT  A
                 ACCEPT  B
                 ADD A TO B
                 DISPLAY A, B.
                 STOP RUN.
1．9
DISPLAY   ZERO
			A在内存中字节数		结果
MOVE  ZERO TO A			4		0000  (每个字节都是0)
MOVE ZEROS TO A			1		0
MOVE SPACE TO A			4		四个空格
MOVE SPACE TO A			1		一个空格
MOVE HIGH-VALUE TO A		4		每隔字节二进制都是11111111
MOVE LOW-VALUE TO A		4		每隔字节二进制都是00000000
MOVE QUOTE TO A			4		''''  (四个单引号)
MOVE ALL  '*'  TO  A		4		****
MOVE ALL  'AB'  TO  A		4		ABAB
MOVE ALL  'ABC'  TO  A		5		ABCAB
2．2．2
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.   EXAM3.
       ENVIRONMENT  DIVISION.
       DATA  DIVISION.
       WORKING-STORAGE  SECTION.
       77  A  PIC  IS  9(3).
       77  B  PIC  IS  9(3).
       77  C  PIC  IS  9(3).
       77  X  PIC  IS  9(3).
       01  T.
         02  T1  PIC  IS  9(3).
         02  T2  PIC  IS  9(3).
         02  T3  PIC  IS  9(3).
         02  T4  PIC  IS  9(3).
       PROCEDURE  DIVISION.
       S.  
           ACCEPT  A
           ACCEPT  B
           ACCEPT  C
           COMPUTE  X = ( A + B ) / C
           MOVE  A  TO  T1.
           MOVE  B  TO  T2.
           MOVE  C  TO  T3.
           MOVE  X  TO  T4.
           DISPLAY T.
           STOP RUN.
2．2．3
	DATA  DIVISION.
	FILE  SECTION.
	FD  IN-FILE  LABEL  RECORD  IS  STANDARD.
	01  IN-RECORD.
	  02  DATE.
	    03  YEAR  PIC  9(4).
	    03  MONTH  PIC  99.
	    03  DAY   PIC  99.
	  02  PRODUCT-CODE  PIC  9(4).
	  02  QUANTITY      PIC  9(6).
	  02  UNIT-PRICE    PIC  9(6).
200605101111000300000100
       PROCEDURE DIVISION.
       L100.
           OPEN INPUT IN-FILE.
       L200.
           READ IN-FILE AT END GO TO L999.
	   DISPLAY IN-RECORD.
           GO TO L200.                                                  
       L999.
           CLOSE IN-FILE.
           STOP RUN.
2．2．4
           DATA  DIVISION.
           FILE  SECTION.
           FD  OUT-FILE  LABEL  RECORD  IS  STANDARD.
           01  OUT-RECORD.
	  02  DATE.
	       03  YEAR               PIC  9(4).
	       03  MONTH           PIC  99.
	       03  DAY                 PIC  99.
	  02  PRODUCT-CODE  PIC  9(4).
	  02  QUANTITY            PIC  9(6).
	  02  UNIT-PRICE          PIC  9(6).
       PROCEDURE DIVISION.
       L100.
           OPEN OUTPUT OUT-FILE.
       L200.
           MOVE  2006  TO   YEAR.
           MOVE  5         TO   MONTH.
           MOVE  1         TO   DAY.  
           MOVE  1860  TO   PRODUCT-CODE.
           MOVE  1234  TO   QUANTITY.
           MOVE  100    TO    UNIT-PRICE. 
           WRITE OUT-RECORD.
       L300.
           CLOSE OUT-FILE.
           STOP RUN.
========= 打印走纸控制 ==========
           MOVE  'HELLO'   TO   V1.
           WRITE OUT-RECORD.
           MOVE  'WORLD'   TO   V1.
           WRITE OUT-RECORD AFTER ADVANCEING 2 LINES.
	MOVE 'A' TO OUT-R.
	WRITE OUT-R.
	MOVE 'B' TO OUT-R.
	WRITE OUT-R. AFTER ADVANCING 3 LINES.
	MOVE 'C' TO OUT-R.
	WRITE OUT-R. AFTER ADVANCING 2 LINES.
	MOVE 'D' TO OUT-R.
	WRITE OUT-R. BEFORE ADVANCING 1 LINES.
2．3．5
练习1
......
PROCEDURE  DIVISION.
S1. 	ACCEPT  N.
	ADD  3  TO N.
	DIVIDE  5  INTO  N.
	SUBTRACT  2  FROM  N.
	MULTIPLY  8  BY  N.
	DISPLAY  N.
	STOP RUN.
练习2
......
PROCEDURE  DIVISION.
S1.	......
	ADD  MON-HOURS,TUE-HOURS,WED-HOURS,THU-HOURS,FRI-HOURS  GIVING  TOTAL-HOURS.
	MULTIPLY   TOTOL-HOURS  BY  PAY-PER-HOUR  GIVING  GROSS-PAY.
	MULTIPLY   GROSS-PAY  BY  RATE  GIVING  WITHHOLD.
	SUBTRACT  WITHHOLD  FROM GROSS-PAY  GIVING  REAL-PAY.
	......
2．4
练习1
......
DATA  DIVISION.
WORKING-STORAGE  SECTION.
77   A   PIC   99V99.
77   B   PIC   999V999.
PROCEDURE  DIVISION. 
S.	MOVE  123.456  TO   A.
	MOVE  A   TO  B.
	DISPLAY   A.		//2345
	DISPLAY   B.		//023450
	STOP  RUN.
练习2
......
DATA DIVISION.             
WORKING-STORAGE SECTION.   
77 A  PIC  X.
77 B  PIC  XX.
77 C  PIC  XXX.
PROCEDURE DIVISION. 
S1.
      MOVE 'XYZ' TO B.
      MOVE B TO A.
      MOVE B TO C.
      DISPLAY A.           		//X
      DISPLAY B.           		//XY
      DISPLAY C, 'HELLO'.  		//XY  HELLO
      STOP RUN.
2．5
练习1
......
PROCEDURE  DIVISION. 
S1.	ACCEPT  A.
	ACCEPT  B.
	ADD  A  TO  B.
S2.	DISPLAY   B.
	GO  TO  S1.	//GO  TO
	STOP  RUN.
......
PROCEDURE DIVISION.        
......
	GO  TO  S1, S2, S3, S4  DEPENDING  ON  V.
S1.	MOVE   0.06   TO   RATE.
	GO  TO  S99.
S2.	MOVE   0.05   TO   RATE.
	GO  TO  S99.
S3.	MOVE   0.04   TO   RATE.
	GO  TO  S99.
S4.	MOVE   0.03   TO   RATE.
S99.	COMPUTE  INTEREST  =  PRINCIPAL  *  RATE.
	DISPLAY  'INTEREST=', INTEREST.
	STOP  RUN.
练习2
	IDENTIFICATION  DIVISION.
	PROGRAM-ID EXAM25.
	ENVIRONMENT DIVISION.
	DATA DIVISION.
	WORKING-STORAGE  SECTION.
	77  M  PIC  9999.
	77  I  PIC 9.
	77  AMOUNT  PIC  99999.
	PROCEDURE  DIVISION.
		ACCEPT  M.
		DIVIDE 50  INTO  M  GIVING  I.
		ADD  1  TO  I.
		GO  TO  A, B, C, D  DEPENDING ON I.
	A.	COMPUTE  AMOUNT = 10 * M.
		GOTO  E.
	B.	COMPUTE  AMOUNT = 9 * M.
		GOTO  E.
	C.	COMPUTE  AMOUNT = 8 * M.
		GOTO  E.
	D.	COMPUTE  AMOUNT = 7 * M.
	E.	DISPLAY  AMOUNT.
		STOP RUN.
2．6．1
	IF  A NOT GREATER THAN 0  DISPLAY  A.
	IF  SEX IS EQUAL TO  'F'  DISPLAY NAME, SEX.
	IF  X < 0  MOVE X TO Y.
2．6．3
	IF  QUANTITY  IS  NOT  LESS  THAN  1000
		MULTIPLY  0.97  BY  PRICE
	ELSE 
		MULTIPLY  0.99  BY  PRICE.
	MULTIPLY  QUANTITY  BY  PRICE  GIVING  TOTAL.
3．3．2
	IDENTIFICATION  DIVISION.
	PROGRAM-ID.  EXAM332.
	AUTHOR.  JIANGHY.
	INSTALLATION.  IBMCENTER.
	DATE-WRITTEN.  2006/5/1.
	DATE-COMPILED.  2006/5/1.
	SECURITY.   USER1 USER2 CAN USE THIS PROGRAM.
3．6
       IDENTIFICATION DIVISION.                                  
       PROGRAM-ID.   DSCOPY.                                      
       ENVIRONMENT DIVISION.                                     
       INPUT-OUTPUT SECTION.                                     
       FILE-CONTROL.                                             
             SELECT IND1 ASSIGN TO DASD-IND1.                    
             SELECT OUTD1 ASSIGN TO DASD-OUTD1.                  
       DATA DIVISION.                                            
       FILE SECTION.                                             
       FD IND1 LABEL RECORD IS STANDARD.                         
       01 IND1-DAT.                                              
          02 FILLER PIC X(80).                                   
       FD OUTD1 LABEL RECORD IS STANDARD.                        
       01 OUTD1-DAT.                                             
          02 FILLER PIC X(80).                                   
       PROCEDURE DIVISION.                       
       S1.                                       
             OPEN INPUT IND1 OUTPUT OUTD1.       
       S2.                                       
             READ IND1 NEXT                      
             AT END GO TO S99.                   
             WRITE OUTD1-DAT FROM IND1-DAT.      
             GO TO S2.                           
       S99.                                      
             CLOSE IND1 OUTD1.                   
             STOP RUN.                           
======================== compile & link 脚本 ==========================
000100 //ST077A    JOB  1,JHY,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),      
000200 //          NOTIFY=&SYSUID                                              
000700 //STEP1  EXEC  IGYWCL
000900 //COBOL.SYSIN   DD DSN=ST077.COBOL.SOURCE(COB1),DISP=SHR                          
001000 //LKED.SYSLMOD  DD DSN=SP077.COBOL.LOAD(COB1),DISP=SHR                         
======================== RUN 脚本 （用来对文件操作） 
//ST077A    JOB  1,JHY,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),
//          NOTIFY=&SYSUID                               
//STEP1  EXEC  PGM=COB1                                  
//STEPLIB  DD  DSN=ST077.COBOL.LOAD,DISP=SHR             
//SYSPRINT DD  SYSOUT=*                                  
======注意IND1,OUTD1 必须跟源文件中数据部文件节的FD相同!
//IND1     DD  DSN=ST077.INDATA,DISP=SHR                 
//OUTD1    DD  DSN=ST077.OUTDATA,DISP=SHR
4．1．2
	01  TIME-RECORD.
	  03  NAME  PIC  X(20).
	  03  WORKER-NUMBER  PIC  9(6).
	  03  WEEKS-END-DATE.
            05  MONTH  PIC 99.
	    05  DAY-NUMBER  PIC  99.
	    05  YEAR  PIC  99.
	  03  HOURS-WORKED.
	    06  REGULAR  PIC  99.
	    06  OVERTIME  PIC  99.
4．2．1
	DATA  DIVISION.
	FILE SECTION.
	FD  ACCOUNTS-FILE		//内部文件名
	  LABEL  RECORD  IS STANDARD.
	  DATA  RECORD  IS  RECEIVABLE.
	01  RECEIVABLE.			//记录名
	  02 ACCOUNT PIC  9(6).		//帐号
	  02 FILLER  PIC  X(3).		//填充
	  02 AMOUNT  PIC  9(6).		//金额
	  02 NAME  PIC  X(60).		//名字
4．3．1
	01  A.
	  02  A1  PIC  9999.
	  02  A2  PIC  AAAA.
	  02  A3  PIC  XXXX.
4．3．2
	identification division.
	program-id.  exam432.
	environment division.
	data division.
	working-storage section.
	77  x  pic s99.
	procedure division.
	s. 
	     move  -66  to x.
	     display  x.		// 输出既不是-66,也不是66
	     stop run.
4．3．5
练习1：
	MOVE  A  TO  B
	A值		B的描述				B值
	12.34		$$99.99			_$12.34
	56.78		$(3)9.99		_$56.78
	0.99		$$$9.99			__$0.99		2个空格
	0.99		$$$$.$$			___$.99		3个空格
	0.0		$$$$.$$			_______		7个空格
	0.05		$$$$.$$			___$.05		3个空格
练习2：
	MOVE  A  TO  B
	A值		B的描述		B值
	12.3		+999.9		+012.3
	-12.3		+999.9		-012.3
	123.45		-999.99		_123.45		1个空格
	-7.7		+++9.9			__-7.7		2个空格
	-0.09		++++.++			___-.03		3个空格
	0.0		++++.++			_______		7个空格
	-34.56		--99.99			_-34.56		1个空格
	10.10		--99.99				__10.10		2个空格
	1234.56		++++.99				+234.56		首位被截去
4．4．2
	77  A  PIC  99  VALUE  IS  0.
	77  B  PIC  XX  VALUE  IS  SPACE.
	01  T.
	  02  T1  PIC  S99V99  VALUE  IS  1.2.
	  02  T2  PIC  X(13)  VALUE  'COBOL PROGRAM'.
	  02  T3  PIC  AAAAAX99  VALUE  'COBOL-85'.
	  02  T4  PIC  A9X9A  VALUE 'G1.2T'.
4．6．1
DATA  DIVISION.
FILE SECTION.
FD  IN-FILE  LABEL RECORD IS STANDARD
01  IN-REC.
     03  DATE  PIC  9(8).
     03  NUM   PIC  9(4).
     03  AMOUNT  PIC  9(3).
     03  PIRCE  PIC  99.
FD  OUT-FILE  LABEL  RECORD IS  STANDARD
01  OUT-REC
     03  DATE  PIC  9(4)/9(2)/9(2)BB.
     03  NUM   PIC  9(4)BB
     03  AMOUNT  PIC  9(3)BB
     03  PIRCE  PIC  99.
FD  OUT-FILE2  LABEL  RECORD IS  STANDARD
01  OUT-REC2 X(23).
WORKING-STORAGE SECTION.
PROCEDURE DIVISION.
INIT.	OPEN INPUT IN-FILE OUTPUT OUT-FILE.
	输出标题
	DIAPLAY 'DATE PD-NUM PD-AMOUNT PD-PRICE'.
	DISPLAY '------------------------------'.
S1.
	READ IN-FILE  AT END GO TO S-END.
	MOVE DATE OF IN-REC  TO  DATE OF OUT-REC.
	MOVE NUM  OF IN-REC  TO  NUM  OF OUT-REC.
	MOVE AMOUNT OF IN-REC  TO  AMOUNT OF OUT-REC.
	MOVE PRICE OF IN-REC  TO  PRICE OF OUT-REC.
	WRITE OUT-REC
	GO TO  S1.
S-END.	
	CLOSE IN-FILE OUT-FILE.
	 STOP RUN.
5.1.1
	MOVE  A  TO  B
	A		B		A值		B(内存)
	PIC  S9(5)	PIC +9(5)		-87565		-87565		//带符号传送
	PIC  S9(3)	PIC 9(3)		-865		865		//不传送符号
	PIC  X(4)		PIC 9(3)		6782		782		//按接收项数据类型的原则截断
	PIC  X(4)		PIC 99V99 	7513		1300		//小数点对齐
6．4．1
	A.	MOVE  0.04  TO  R.
		ADD  1  TO  R.
		MOVE  100  TO  P.
		PERFORM  B  5 TIMES.
		STOP  RUN.
	B.	MULTIPLY  R  BY  P.
6．4．2
	A.	MOVE  5  TO  N.
		MOVE  1  TO  M.
		PERFORM  B  N  TIMES.
		DISPLAY  M.
	B.	MULTIPLY  N  BY  M.
		SUBTRACT  1  FROM  N.
6．6．1
	identification division.
	program-id.  exam1.
	environment division.
	data division.
	WORKING-STORAGE SECTION.
	77 i  pic  99.
	77 j  pic  99.
	77 s  pic  zz.
	procedure division.
	a. 	
		perform b varying i from  1  by  1 until i > 9
			    after j from  1  by  1 until j > 9
		stop run.
	b.	compute  s = i * j.
		display i, '*', j, '=', s.
7．9
	ID DIVISION.
	PROGRAM-ID.  exam1.
	ENVIRONMENT DIVISION.
	INPUT-OUTPUT SECTION.
	FILE-CONTROL.
		SELECT IN-FILE  ASSIGN TO 'D:\IN.TXT'.
		SELECT OUT-FILE ASSIGN TO 'D:\OUT.TXT'.
	DATA DIVISION.
	FILE SECTION.
	FD IN-FILE  LABEL RECORD IS STANDARD.
	01 IN-REC1.
		02 FLAG1 PIC X.
		02 DATE-AREA PIC X(4).
		02 FILLER PIC X(6).
	01 IN-REC2.
		02 FLAG2 PIC X.
		02 DEPT  PIC X(4).
		02 NUM	 PIC X(6).
	FD OUT-FILE LABEL RECORD IS STANDARD.
	01 OUT-REC.
		02 OUT-DATA PIC X(6).
	PROCEDURE DIVISION.
	s1.
		OPEN  INPUT IN-FILE OUTPUT OUT-FILE.
	S2.
		READ IN-FILE AT END GO TO S99.
		IF FLAG2 = 'C'
		  MOVE NUM TO OUT-DATA
		  WRITE OUT-REC.
		GO TO S2.
	S99.
		CLOSE IN-FILE OUT-FILE.
		STOP RUN.
8．6
	IDENTIFICATION DIVISION.
	PROGRAM-ID.	EXAM86.
	ENVIRONMENT DIVISION.
	INPUT-OUTPUT SECTION.
	FILE-CONTROL.
		SELECT OLD-SALES-FILE ASSIGN TO  DASD-INFILE.
		SELECT NEW-SALES-FILE ASSIGN TO  DASD-OUTFILE.
	DATA DIVISON.
	FILE SECTION.
	FD OLD-SALES-FILE LABEL RECORD IS STANDARD.
	01 OLD-SALES-REC.
	   02  PUR-DATE.
		03  YEAR  PIC  9(4).
		03  MONTH PIC  99.
		03  DAY   PIC  99.
	   02  PRODUCT-CODE  PIC  9(4).
	   02  CUSTOMER-CODE PIC  9(4).
	   02  QTY           PIC  9(6).
	   02  FILLER        PIC X(58).
	FD NEW-SALES-FILE LABEL RECORD IS STANDARD.
	01 NEW-SALES-REC.
	   02  PUR-DATE.
		03  YEAR  PIC  9(4).
		03  MONTH PIC  99.
		03  DAY   PIC  99.
	   02  PRODUCT-CODE  PIC  9(4).
	   02  CUSTOMER-CODE PIC  9(4).
	   02  QTY  PIC      PIC  9(6).
	   02  UNIT-PRICE    PIC  9(4).
	   02  SALES-VALUE   PIC  9(8).
	   02  FILLER        PIC X(46).
	WORKING-STORAGE SECTION.
	77  I  PIC 9.
	01  UNIT-PRICE-TABLE.
	   02  FILLER  PIC  X(8)  VALUE '00100200'.
	   02  FILLER  PIC  X(8)  VALUE '00200400'.
	   02  FILLER  PIC  X(8)  VALUE '00300600'.
	   02  FILLER  PIC  X(8)  VALUE '00400800'.
	   02  FILLER  PIC  X(8)  VALUE '00501000'.
	01  UNIT-PRICE-TABLE-REC  REDEFINES  UNIT-PRICE-TABLE.
	   02  TABLE  OCCURS  5 TIMES.
		03  PRODUCT-CODE-T  PIC  9(4).
		03  UNIT-PRICE-T    PIC  9(4).
	PROCEDURE DIVISION.
	INIT.
		OPEN  INPUT  OLD-SALES-FILE.
		OPEN  OUTPUT NEW-SALES-FILE.
		
	READ-FILE.
		READ  OLD-SALES-FILE  AT END  GO TO P-END.
		MOVE  1  TO  I.
	SEARCH-TABLE.
		IF  PRODUCT-CODE OF OLD-SALES-REC = PRODUCT-CODE-T (I)
			GO TO COMPUTE-SALES-VALUE.
		ADD 1 TO I.
		IF I > 5
			GO TO READ-FILE.
		GO TO SEARCH-TABLE.
	COMPUTE-SALES-VALUE.
		MOVE  CORR  OLD-SALES-REC  TO  NEW-SALES-REC.
		MOVE  UNIT-PRICE-T (I) TO UNIT-PRICE.
		COMPUT  SALES-VALUE = UNIT-PRICE * QTY OF NEW-SALES-REC.
		WRITE  NEW-SALES-REC.
		GO  TO  READ-FILE.
	P-END.
		CLOSE  OLD-SALES-FILE  NEW-SALES-FILE.
		STOP  RUN.
9．2
主程序: ST077.COBOL.SOURCE(C1)
***************************** Top of Data ******************************
       IDENTIFICATION  DIVISION.                                        
       PROGRAM-ID.  MAIN.                                               
       ENVIRONMENT  DIVISION.                                           
       DATA  DIVISION.                                                  
       PROCEDURE  DIVISION.                                             
           DISPLAY 'CALL SUBPROGRAM'.                                   
           CALL 'SUBPG'.                                                   
           DISPLAY 'CALL END'.                                          
           STOP RUN.                                                    
**************************** Bottom of Data ****************************
子程序: ST077.COBOL.SOURCE(C2)
***************************** Top of Data ******************************
       IDENTIFICATION  DIVISION.                                        
       PROGRAM-ID.   SUBPG.                                             
       ENVIRONMENT  DIVISION.                                           
       DATA  DIVISION.                                                  
       PROCEDURE        DIVISION.                                       
           DISPLAY 'BEGIN CALL'.                                        
           DISPLAY 'THIS IS A SUBPROGRAM'.                              
           DISPLAY 'END CALL'.                                          
           EXIT PROGRAM.                                                
**************************** Bottom of Data ****************************
编译子程序的JCL: ST077.COBOL.COMLINK2
***************************** Top of Data ******************************
//ST077A JOB 1,JHY,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),                   
//     NOTIFY=&SYSUID                                                   
//COBOL EXEC IGYWCL                                                     
//STEPLIB DD DSN=IGY330.SIGYCOMP,DISP=SHR                               
//COBOL.SYSLIB DD DSN=ST077.COBOL.SOURCE,DISP=SHR                       
//COBOL.SYSIN  DD DSN=ST077.COBOL.SOURCE(C2),DISP=SHR                   
//LKED.SYSLMOD DD DSN=ST077.COBOL.LOAD(SUBPG),DISP=SHR                  
//SYSPRINT DD SYSOUT=*                                                  
**************************** Bottom of Data ****************************
编译主程序的JCL: ST077.COBOL.COMLINK
***************************** Top of Data ******************************
//ST077A JOB 1,JHY,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),                   
//     NOTIFY=&SYSUID                                                   
//COBOL EXEC IGYWCL                                                     
//STEPLIB      DD DSN=IGY330.SIGYCOMP,DISP=SHR                          
//LKED.SYSLIB  DD DSN=ST077.COBOL.LOAD,DISP=SHR                         
//COBOL.SYSLIB DD DSN=ST077.COBOL.SOURCE,DISP=SHR                       
//LKED.SYSLMOD DD DSN=ST077.COBOL.LOAD(MAIN),DISP=SHR                   
//COBOL.SYSIN  DD DSN=ST077.COBOL.SOURCE(C1),DISP=SHR                   
//SYSPRINT DD SYSOUT=*                                                  
**************************** Bottom of Data ****************************
运行主程序的JCL: ST077.COBOL.RUN
***************************** Top of Data ******************************
//ST077A    JOB  1,JHY,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),               
//          NOTIFY=&SYSUID                                              
//STEP1  EXEC  PGM=MAIN                                                 
//STEPLIB  DD  DSN=ST077.COBOL.LOAD,DISP=SHR                            
//SYSPRINT DD  SYSOUT=*                                                 
**************************** Bottom of Data ****************************
输出结果
********************************* TOP OF DATA **********************************
CALL SUBPROGRAM                                                                 
BEGIN CALL                                                                      
THIS IS A SUBPROGRAM                                                            
END CALL                                                                        
CALL END                                                                        
******************************** BOTTOM OF DATA ********************************
9．5
主程序: ST077.COBOL.SOURCE(C1)
***************************** Top of Data ******************************
       IDENTIFICATION  DIVISION.                                        
       PROGRAM-ID.  MAIN.                                               
       ENVIRONMENT  DIVISION.                                           
       DATA  DIVISION.                                                  
       WORKING-STORAGE SECTION.                                         
       77  A  PIC  99  VALUE  10.                                       
       77  B  PIC  99  VALUE  20.                                       
       PROCEDURE  DIVISION.                                             
           CALL 'SUBPG' USING  A, BY CONTENT B.           //USING  BY CONTENT A, B            
           DISPLAY 'AFTER CALLING:'.                                    
           DISPLAY 'A=', A.                                             
           DISPLAY 'B=', B.                                             
           STOP RUN.                                                    
**************************** Bottom of Data ****************************
子程序: ST077.COBOL.SOURCE(C2)
***************************** Top of Data ******************************
       IDENTIFICATION  DIVISION.                                        
       PROGRAM-ID.   SUBPG.                                             
       ENVIRONMENT  DIVISION.                                           
       DATA  DIVISION.                                                  
       LINKAGE SECTION.                                                 
       77  A1  PIC  99.                                                 
       77  B1  PIC  99.                                                 
       PROCEDURE   DIVISION  USING  A1 B1.                              
           ADD  1  TO  A1.                                              
           ADD  1  TO  B1.                                              
           DISPLAY 'CALL SUBPROGRAM:'.                                  
           DISPLAY 'A1=', A1.                                           
           DISPLAY 'B1=', B1.                                           
           EXIT PROGRAM.                                                
**************************** Bottom of Data ****************************
9．6．1
	ID  DIVISION.
	PROGRAM-ID.  MODULE1.
	ENVIRONMENT  DIVISION.
	DATA  DIVISION.
	WORKING-STORAGE  SECTION.
	01  SHARE-DATA  PIC  X(32)  GLOBAL.
	PROCEDURE  DIVISION.
		MOVE  'beginning  contents'  TO  SHARE-DATA.
		CALL  'MODULE2'.
		DISPLAY  SHARE-DATA.
		STOP  RUN.
	ID  DIVISION.
	PROGRAM-ID.  MODULE2.
	DATA  DIVISION.
	WORKING-STORAGE  SECTION.
	PROCEDURE  DIVISION.
		DISPLAY  'entering  module2'.
		DISPLAY  SHARE-DATA.
		MOVE  'ending  contents'  TO  SHARE-DATA.
		DISPLAY  'leaving  module2'.
		EXIT  PROGRAM.
	END  PROGRAM  MODULE2.
	END  PROGRAM  MODULE1.
*********************
entering  module2
begining  contents
leaving  contents
ending  contents
*********************
9．6．2
	ID  DIVISION.
	PROGRAM-ID.   MODULE1.
	ENVIRONMENT  DIVISION.
	DATA  DIVISION.
	WORKING-STORAGE SECTION.
	01  SHARE-DATA  PIC  X(30)  EXTERNAL.			//外部数据项
	PROCEDURE  DIVISION.
		MOVE  'begin  contents'  TO  SHARE-DATA.
		CALL  MODULE2.
		DISPLAY  SHARE-DATA.
		STOP  RUN.
============================================================
	ID  DIVISION.
	PROGRAM-ID.   MODULE2.
	ENVIRONMENT  DIVISION.
	DATA  DIVISION.
	WORKING-STORAGE SECTION.
	01  SHARE-DATA  PIC  X(30)  EXTERNAL.			//外部数据项
	PROCEDURE  DIVISION.
		DISPLAY  'entering  module2'.
		DISPLAY  SHARE-DATA.
		MOVE  'ending  contents'  TO  SHARE-DATA.
		DISPLAY  'leaving  module2'.
		EXIT  PROGRAM.

